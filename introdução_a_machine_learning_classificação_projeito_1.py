# -*- coding: utf-8 -*-
"""Introdução a Machine Learning Classificação projeito 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fpcNysWAC7PqsO6d9lK6ixJ0W7jbcTVI
"""

# features (1 sim, 0 não )
# Pelo longo?
# Perna curta? 
# Faz au au? 

porco1 = [0, 1, 0]
porco2 = [0, 1, 1]
porco3 = [1, 1, 0]

cachorro1 = [0, 1, 1]
cachorro2 = [1, 0, 1]
cachorro3 = [1, 1, 1]

# 1 -> Porco, 0 ->Cachorro
treino_x = [porco1, porco2, porco3, cachorro1, cachorro2, cachorro3]
treino_y = [1,1,1,0,0,0] #minhas classes. Categorias que eu quero classificar - Labels/Etiquetas

# Estimador de classes (scikt-learn)
from sklearn.svm import LinearSVC

model = LinearSVC() #instanciando meu estimador 
model.fit(treino_x, treino_y) #Aprendendo os dados e as classes

animal_desconhecido = [1,1,1] 
model.predict([animal_desconhecido]) # Tentando predizer a classe desse animal/ Passando uma lista com 1 item e esse 1 item tem 3 features.

animal1 = [1,1,1]
animal2 = [1,1,0]
animal3 = [0,1,1]

testes_x = [animal1, animal2, animal3] #Tratar esses casos como nosso teste/ rever o teste.
testes_y = [0, 1, 1] # Lista do python
previsoes = model.predict(testes_x)

corretos = (previsoes == testes_y).sum() #Comparando minhas previsões com os dados de teste./ Somando para obter o número de acertos 
total = len(testes_x) #tamanho do teste realizado
taxa_de_acerto = corretos/total 

print("Taxa de acerto %.2f" % (taxa_de_acerto * 100))

from sklearn.metrics import accuracy_score  
#medir a taxa de acerto do meu modelo
taxa_de_acerto = accuracy_score ( testes_y, previsoes)
print ("Taxa de acerto %.2f" % (taxa_de_acerto * 100))