# -*- coding: utf-8 -*-
"""Introdução a Machine Learning Classificação projeto 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q628Nx7Q3EKAdl-87CbH-flk3-gADIDv
"""

# Features: 
# home 0 -> Usuário específico não acessou a página // 1 -> Usuário específico acessou a página.
# how_it_works 0 -> Usuário específico não acessou a página // 1 -> Usuário específico acessou a página.
# contact 0 -> Usuário específico não acessou a página // 1 -> Usuário específico acessou a página.
# bought 0 -> Não comprou // 1-> Comprou.

import pandas as pd # Leitura de arquivo csv. 

uri = "https://gist.githubusercontent.com/guilhermesilveira/2d2efa37d66b6c84a722ea627a897ced/raw/10968b997d885cbded1c92938c7a9912ba41c615/tracking.csv"

dados = pd.read_csv(uri) #"leia um arquivo csv".
dados.head() #Imprimir por padrão somente as 5 primeiras linhas.

mapa = {
    "home":"principal",
    "how_it_works":"como_funciona",
    "contact":"contato",
    "bought":"comprou"
} #Criando um dicionário chamado "mapa" e nomeando minhas features em inglês com outras chaves de valores em português.

dados = dados.rename(columns = mapa )#trocando os nomes das features para português, caso queira ou seja necessário // Alterando a referencia da antiga tabela, para essa tabela nova (dados = dados.rename)

#Separar as features(home, how_it_works) -> Como se fossem o nosso x de uma função qualquer, da coluna de bought.
x = dados[['principal', 'como_funciona', 'contato']] # Passando os dados dentro de um array, pois precisamos passar várias colunas. "Dentro de uma lista do python, eu quero buscar essas colunas"
y = dados['comprou']
x.head()
y.head()

dados.shape #Saber o formato dos dados

#Separando dados de teste e dados de treino (25% para testar e 75% para treino)

treino_x = x[:75] # Pegando 75 elementos da minha tabela para treino 
treino_y = y[:75]
teste_x = x[75:] # A partir do 75
teste_y = y[75:] 

print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x),len(teste_x)))

from sklearn.svm import LinearSVC #estimador
from sklearn.metrics import accuracy_score
modelo = LinearSVC()
modelo.fit(treino_x, treino_y) #Treinando meu modelo com os dados de treino.

previsoes = modelo.predict(teste_x) #Predizendo através dos meus dados de teste, após ser treinado com meus dados de treino
taxa_de_acerto = accuracy_score(teste_y, previsoes)* 100 #Imprimir minha taxa de acerto ou "acurácia" - Comparação com os meus dados reais de teste
print("A acurácia foi %.2f" % taxa_de_acerto)

"""# **# Usando a biblioteca para separar treino e teste.**"""

from sklearn.model_selection import train_test_split #Separando o treino e teste de um conjunto de dados qualquer
from sklearn.svm import LinearSVC #estimador
from sklearn.metrics import accuracy_score


SEED = 20  #Definindo a ordem dos números aleatórios

#random_stateint, RandomState instance or None, default=None -> Controls the shuffling applied to the data before applying the split. Pass an int for reproducible output across multiple function calls.
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, random_state = SEED, test_size = 0.25) #Separando os dados para treino e teste e estipulando o tamanho para o teste, também. 
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x),len(teste_x)))

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x) #Predizendo através dos meus dados de teste, após ser treinado com meus dados de treino
taxa_de_acerto = accuracy_score(teste_y, previsoes)* 100 #Imprimir minha taxa de acerto ou "acurácia" - Comparação com os meus dados reais de teste
print("A acurácia foi %.2f" % taxa_de_acerto)

treino_y.value_counts() #contando quantos zeros e uns eu tenho no meu treino.

teste_y.value_counts() #contando quantos zeros e uns eu tenho no meu treino.

from sklearn.model_selection import train_test_split #Separando o treino e teste de um conjunto de dados qualquer
from sklearn.svm import LinearSVC #estimador
from sklearn.metrics import accuracy_score


SEED = 20  #Definindo a ordem dos números aleatórios

#random_stateint, RandomState instance or None, default=None -> Controls the shuffling applied to the data before applying the split. Pass an int for reproducible output across multiple function calls.
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, random_state = SEED, stratify = y, test_size = 0.25) #Separando os dados para treino e teste e estipulando o tamanho para o teste, também. 
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x),len(teste_x)))

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x) #Predizendo através dos meus dados de teste, após ser treinado com meus dados de treino
taxa_de_acerto = accuracy_score(teste_y, previsoes)* 100 #Imprimir minha taxa de acerto ou "acurácia" - Comparação com os meus dados reais de teste
print("A acurácia foi %.2f" % taxa_de_acerto)

treino_y.value_counts()

teste_y.value_counts()

